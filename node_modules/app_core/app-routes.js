/**
 * Created by skitsanos on 12/03/15.
 */
String.prototype.startsWith = function (str)
{
	return (this.indexOf(str) === 0);
};

String.prototype.mid = function (start, len)
{
	if (start < 0 || len < 0) return "";
	var iEnd, iLen = String(this).length;
	if (start + len > iLen)
	{
		iEnd = iLen;
	}
	else
	{
		iEnd = start + len;
	}
	return String(this).substring(start, iEnd);
};

var url = require('url');
var HashMap = require('hashmap').HashMap; //https://www.npmjs.com/package/hashmap

var app_routes = (function ()
{
	var _list = new HashMap();

	return {
		owner: null,

		context: {
			path: null,
			url: null,  /* https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost */
			method: 'GET'
		},

		items: _list,

		getRoute: function (path)
		{
			//process wildcards like 'startswith' (^/somepath)
			var routesWithStartsWith = _list.keys().filter(function (v, ndx, arr)
			{
				return v.startsWith('^');
			}); //return array of wildcards

			//walk through all wildcards
			for (var i = 0; i < routesWithStartsWith.length; i++)
			{
				//check if requested path starts with the wildcard we have in the list
				var foundWildcard = routesWithStartsWith[i];
				if (path.startsWith(foundWildcard.substr(1)))
				{
					return routesWithStartsWith[i];
				}
			}

			return path;
		},

		add: function (path, handler)
		{
			_list.set(path, handler);
		},

		remove: function (path)
		{
			_list.remove(path);
		},

		process: function ()
		{
			var parsedPath = url.parse(this.owner.request.url, true);
			var path = url.parse(this.owner.request.url, false).pathname;

			this.context.path = path;
			this.context.url = parsedPath;
			this.context.method = this.owner.request.method;

			var routeToProcess = this.getRoute(path);

			var handler = _list.get(routeToProcess);
			if (handler != null)
			{
				handler();
			}
			else
			{
				this.owner.utils.serveError(501, 'Not Implemented');
			}
		}
	};
})();

module.exports = app_routes;
