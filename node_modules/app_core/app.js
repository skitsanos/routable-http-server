/**
 * Application Core
 * Created by skitsanos on 12/03/15.
 */
var fs = require('fs');
var url = require('url');
var mime = require('mime');

var app = (function () {
	var _app = this;
	var _basedir = __dirname;

	return {
		title: 'routable-http-server, v.2.*',

		request: null,
		response: null,

		api: {},

		config: {
			htmlDir: _basedir,
			enableWebsockets: false
		},

		io: {
			basedir: _basedir,

			readFile: function (path, options) {
				return fs.readFileSync(path, options);
			},

			fileExists: function (path) {
				return fs.existsSync(path);
			},

			fileExtension: function (filename) {
				var ext = path.extname(filename || '').split('.');
				return ext[ext.length - 1];
			}
		},

		utils: {
			redirect: function (url) {
				app.response.writeHead(302, {
					'Location': url
				});
				app.response.end();
			},

			redirectPermanently: function (url) {
				app.response.writeHead(301, {
					'Location': url
				});
				app.response.end();
			},

			serveContent: function (path, contentType) {
				if (arguments.length == 1) {
					//assume Content-Type from file we are serving
					contentType = mime.lookup(path);
				}

				if (fs.existsSync(path)) {
					var body = app.io.readFile(path);

					app.response.writeHead(200, {
						'Content-Length': body.length,
						'Content-Type': contentType
					});
					app.response.end(body, 'utf8', function (err) {
						if (err) {
							console.error(err);
						}
					});
				}
				else {
					app.utils.serveError(404, 'Not Found');
				}
			},

			serveRAW: function (data, contentType) {
				app.response.writeHead(200, {
					'Content-Type': contentType
				});
				app.response.end(data, 'utf8', function (err) {
					if (err) {
						console.error(err);
					}
				});
			},

			serveJson: function (type, content) {
				app.utils.serveRAW(JSON.stringify({type: type, result: content}), 'application/json');
			},

			serveError: function (code, message) {
				app.response.writeHead(code, {
					'Content-Length': message.length,
					'Content-Type': 'text/html'
				});

				app.response.end(message, 'utf8', function (err) {
					if (err) {
						console.error(err);
					}
				});
			},

			getRandomPassword: function (length) {
				var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
				var pass = '';
				for (var i = 0; i < length; ++i) {
					var x = Math.floor(Math.random() * 62);
					pass += chars.charAt(x);
				}
				return pass;
			},

			isValidContentType: function () {
				return !(app.request.headers['content-type'] != undefined && !(app.request.headers['content-type'].startsWith('application/json')));
			},

			parseRequestBody: function (callback) {
				console.error('testing');
				var requestBody = '';
				app.request.addListener('data', function (chunk) {
					requestBody += chunk;
					//kill all requests bigger than 1Kb
					if (requestBody.length > 2048) {
						// FLOOD ATTACK OR FAULTY CLIENT, NUKE REQUEST
						app.request.connection.destroy();
					}
				});

				app.request.on('end', function () {
					try {
						callback(requestBody);
					}
					catch (e) {
						app.utils.serveJson('error', e.message);
					}
				});
			},

			parseJSON: function (d) {
				try {
					var doc = JSON.parse(d);
					if (typeof (doc) == 'string') {
						doc = JSON.parse(doc);
						return doc;
					}
					return doc;
				}
				catch (ex) {
					return null;
				}
			}
		},

		router: null
	}
})();

module.exports = app;
